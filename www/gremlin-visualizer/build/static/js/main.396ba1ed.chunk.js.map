{"version":3,"sources":["constants.js","reducers/gremlinReducer.js","logics/utils.js","reducers/graphReducer.js","reducers/optionReducer.js","components/NetworkGraph/NetworkGraphComponent.js","logics/actionHelper.js","components/Header/HeaderComponent.js","components/Details/DetailsComponent.js","App.js","index.js"],"names":["QUERY_ENDPOINT","COMMON_GREMLIN_ERROR","ACTIONS","initialState","host","port","query","error","selectRandomField","obj","firstKey","getDiffNodes","newList","oldList","_","differenceBy","node","id","getDiffEdges","edge","from","to","findNodeById","nodeList","find","stringifyObjectValues","forOwn","value","key","isString","JSON","stringify","network","nodeHolder","vis","DataSet","edgeHolder","nodes","edges","selectedNode","selectedEdge","nodeLabels","queryHistory","isPhysicsEnabled","nodeLimit","networkOptions","physics","forceAtlas2Based","gravitationalConstant","centralGravity","springLength","springConstant","avoidOverlap","maxVelocity","solver","timestep","stabilization","enabled","iterations","updateInterval","shape","size","borderWidth","font","width","smooth","type","NetworkGraph","data","this","props","Network","refs","myRef","on","params","nodeId","length","dispatch","payload","edgeId","ref","className","React","Component","NetworkGraphComponent","connect","state","graph","options","onFetchQuery","result","oldNodeLabels","nodeLabelMap","mapValues","keyBy","forEach","label","field","properties","nodeLabel","push","labelField","String","group","concat","map","arrows","scaleFactor","extractEdgesAndNodes","Header","axios","post","headers","then","response","catch","noValidate","autoComplete","TextField","onChange","event","onHostChanged","target","style","onPortChanged","onQueryChanged","Button","variant","color","onClick","sendQuery","bind","clearGraph","HeaderComponent","gremlin","Details","index","limit","direction","setOptions","list","cloneElement","ListItem","ListItemText","primary","InputLabelProps","shrink","onEditNodeLabel","IconButton","aria-label","onRemoveNodeLabel","fontSize","hasSelected","selectedType","selectedId","selectedProperties","selectedHeader","isEmpty","get","Grid","container","spacing","item","xs","sm","md","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","List","dense","generateList","Tooltip","title","FormControlLabel","control","Switch","checked","onTogglePhysics","Divider","onEditNodeLimit","generateNodeLabelList","Fab","onRefresh","onAddNodeLabel","onTraverse","Table","TableBody","TableRow","TableCell","scope","align","json","DetailsComponent","App","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","clear","newNodes","add","newEdges","update","editIndex","editedNodeLabel","slice","removeIndex","store","createStore","applyMiddleware","createLogger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.396ba1ed.chunk.js","sourcesContent":["const SERVER_URL = 'http://localhost:3001';\nexport const QUERY_ENDPOINT = `${SERVER_URL}/query`;\nexport const COMMON_GREMLIN_ERROR = 'Invalid query. Please execute a query to get a set of vertices';\nexport const ACTIONS = {\n  SET_HOST: 'SET_HOST',\n  SET_PORT: 'SET_PORT',\n  SET_QUERY: 'SET_QUERY',\n  SET_ERROR: 'SET_ERROR',\n  SET_NETWORK: 'SET_NETWORK',\n  CLEAR_GRAPH: 'CLEAR_GRAPH',\n  ADD_NODES: 'ADD_NODES',\n  ADD_EDGES: 'ADD_EDGES',\n  SET_SELECTED_NODE: 'SET_SELECTED_NODE',\n  SET_SELECTED_EDGE: 'SET_SELECTED_EDGE',\n  SET_IS_PHYSICS_ENABLED: 'SET_IS_PHYSICS_ENABLED',\n  ADD_QUERY_HISTORY: 'ADD_QUERY_HISTORY',\n  CLEAR_QUERY_HISTORY: 'CLEAR_QUERY_HISTORY',\n  SET_NODE_LABELS: 'SET_NODE_LABELS',\n  ADD_NODE_LABEL: 'ADD_NODE_LABEL',\n  EDIT_NODE_LABEL: 'EDIT_NODE_LABEL',\n  REMOVE_NODE_LABEL: 'REMOVE_NODE_LABEL',\n  REFRESH_NODE_LABELS: 'REFRESH_NODE_LABELS',\n  SET_NODE_LIMIT: 'SET_NODE_LIMIT'\n};\n","import { ACTIONS } from '../constants';\n\nconst initialState = {\n  host: 'localhost',\n  port: '8182',\n  query: '',\n  error: null\n};\n\nexport const reducer =  (state=initialState, action)=>{\n  switch (action.type){\n    case ACTIONS.SET_HOST: {\n      return { ...state, host: action.payload }\n    }\n    case ACTIONS.SET_PORT: {\n      return { ...state, port: action.payload }\n    }\n    case ACTIONS.SET_QUERY: {\n      return { ...state, query: action.payload, error: null }\n    }\n    case ACTIONS.SET_ERROR: {\n      return { ...state, error: action.payload }\n    }\n    default:\n      return state;\n  }\n};\n","import _ from 'lodash';\n\nconst selectRandomField = (obj) => {\n  let firstKey;\n  for (firstKey in obj) break;\n  return firstKey;\n};\n\nexport const getDiffNodes = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, (node) => node.id);\n};\n\nexport const getDiffEdges = (newList, oldList) => {\n  return _.differenceBy(newList, oldList, (edge) => `${edge.from},${edge.to}`);\n};\n\nexport const extractEdgesAndNodes = (nodeList, nodeLabels=[]) => {\n  let edges = [];\n  const nodes = [];\n\n  const nodeLabelMap =_.mapValues( _.keyBy(nodeLabels, 'type'), 'field');\n\n  _.forEach(nodeList, (node) => {\n    const type = node.label;\n    if (!nodeLabelMap[type]) {\n      const field = selectRandomField(node.properties);\n      const nodeLabel = { type, field };\n      nodeLabels.push(nodeLabel);\n      nodeLabelMap[type] = field;\n    }\n    const labelField = nodeLabelMap[type];\n    const label = labelField in node.properties ? node.properties[labelField] : type;\n    nodes.push({ id: node.id, label: String(label), group: node.label, properties: node.properties, type });\n\n    edges = edges.concat(_.map(node.edges, edge => ({ ...edge, type: edge.label, arrows: { to: { enabled: true, scaleFactor: 0.5 } } })));\n  });\n\n  return { edges, nodes, nodeLabels }\n};\n\nexport const findNodeById = (nodeList, id) => {\n  return _.find(nodeList, node => node.id === id);\n};\n\nexport const stringifyObjectValues = (obj) => {\n  _.forOwn(obj, (value, key) => {\n    if (!_.isString(value)) {\n      obj[key] = JSON.stringify(value);\n    }\n  });\n};\n","import vis from 'vis-network';\nimport _ from 'lodash';\nimport { ACTIONS } from '../constants';\nimport { getDiffNodes, getDiffEdges, findNodeById } from '../logics/utils';\n\nconst initialState = {\n  network: null,\n  nodeHolder: new vis.DataSet([]),\n  edgeHolder: new vis.DataSet([]),\n  nodes: [],\n  edges: [],\n  selectedNode: {},\n  selectedEdge: {},\n};\n\nexport const reducer =  (state=initialState, action)=>{\n  switch (action.type){\n    case ACTIONS.CLEAR_GRAPH: {\n      state.nodeHolder.clear();\n      state.edgeHolder.clear();\n\n      return { ...state, nodes: [], edges: [], selectedNode:{}, selectedEdge: {} };\n    }\n    case ACTIONS.SET_NETWORK: {\n      return { ...state, network: action.payload };\n    }\n    case ACTIONS.ADD_NODES: {\n      const newNodes = getDiffNodes(action.payload, state.nodes);\n      const nodes = [...state.nodes, ...newNodes];\n      state.nodeHolder.add(newNodes);\n      return { ...state, nodes };\n    }\n    case ACTIONS.ADD_EDGES: {\n      const newEdges = getDiffEdges(action.payload, state.edges);\n      const edges = [...state.edges, ...newEdges];\n      state.edgeHolder.add(newEdges);\n      return { ...state, edges };\n    }\n    case ACTIONS.SET_SELECTED_NODE: {\n      const nodeId = action.payload;\n      let selectedNode = {};\n      if (nodeId !== null) {\n        selectedNode = findNodeById(state.nodes, nodeId);\n      }\n      return { ...state, selectedNode, selectedEdge: {} };\n    }\n    case ACTIONS.SET_SELECTED_EDGE: {\n      const edgeId = action.payload;\n      let selectedEdge = {};\n      if (edgeId !== null) {\n        selectedEdge = findNodeById(state.edges, edgeId);\n      }\n      return { ...state, selectedEdge, selectedNode: {} };\n    }\n    case ACTIONS.REFRESH_NODE_LABELS: {\n      const nodeLabelMap =_.mapValues( _.keyBy(action.payload, 'type'), 'field');\n      _.map(state.nodes, node => {\n        if (node.type in nodeLabelMap) {\n          const field = nodeLabelMap[node.type];\n          const label = node.properties[field];\n          state.nodeHolder.update({id:node.id, label: label});\n          return {...node, label };\n        }\n        return node;\n      });\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import _ from 'lodash';\nimport { ACTIONS } from '../constants';\n\nconst initialState = {\n  nodeLabels: [],\n  queryHistory: [],\n  isPhysicsEnabled: true,\n  nodeLimit: 100,\n  networkOptions: {\n    physics: {\n      forceAtlas2Based: {\n        gravitationalConstant: -26,\n        centralGravity: 0.005,\n        springLength: 230,\n        springConstant: 0.18,\n        avoidOverlap: 1.5\n      },\n      maxVelocity: 40,\n      solver: 'forceAtlas2Based',\n      timestep: 0.35,\n      stabilization: {\n        enabled: true,\n        iterations: 50,\n        updateInterval: 25\n      }\n    },\n    nodes: {\n      shape: \"dot\",\n      size: 20,\n      borderWidth: 2,\n      font: {\n        size: 11\n      }\n    },\n    edges: {\n      width: 2,\n      font: {\n        size: 11\n      },\n      smooth: {\n        type: 'dynamic'\n      }\n    }\n  }\n};\n\nexport const reducer =  (state=initialState, action)=>{\n  switch (action.type){\n    case ACTIONS.SET_IS_PHYSICS_ENABLED: {\n      const isPhysicsEnabled = _.get(action, 'payload', true);\n      return { ...state, isPhysicsEnabled };\n    }\n    case ACTIONS.ADD_QUERY_HISTORY: {\n      return { ...state, queryHistory: [ ...state.queryHistory, action.payload] }\n    }\n    case ACTIONS.CLEAR_QUERY_HISTORY: {\n      return { ...state, queryHistory: [] }\n    }\n    case ACTIONS.SET_NODE_LABELS: {\n      const nodeLabels = _.get(action, 'payload', []);\n      return { ...state, nodeLabels };\n    }\n    case ACTIONS.ADD_NODE_LABEL: {\n      const nodeLabels = [...state.nodeLabels, {}];\n      return { ...state, nodeLabels };\n    }\n    case ACTIONS.EDIT_NODE_LABEL: {\n      const editIndex = action.payload.id;\n      const editedNodeLabel = action.payload.nodeLabel;\n\n      if (state.nodeLabels[editIndex]) {\n        const nodeLabels = [...state.nodeLabels.slice(0, editIndex), editedNodeLabel, ...state.nodeLabels.slice(editIndex+1)];\n        return { ...state, nodeLabels };\n      }\n      return state;\n    }\n    case ACTIONS.REMOVE_NODE_LABEL: {\n      const removeIndex = action.payload;\n      if (removeIndex < state.nodeLabels.length) {\n        const nodeLabels = [...state.nodeLabels.slice(0, removeIndex), ...state.nodeLabels.slice(removeIndex+1)];\n        return { ...state, nodeLabels };\n      }\n      return state;\n    }\n    case ACTIONS.SET_NODE_LIMIT: {\n      const nodeLimit = action.payload;\n      return { ...state, nodeLimit };\n    }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport vis from 'vis-network';\nimport { ACTIONS } from '../../constants';\n\nclass NetworkGraph extends React.Component{\n  componentDidMount() {\n    const data = {\n      nodes: this.props.nodeHolder,\n      edges: this.props.edgeHolder\n    };\n    const network = new vis.Network(this.refs.myRef, data, this.props.networkOptions);\n\n    network.on('selectNode', (params) => {\n      const nodeId = params.nodes && params.nodes.length > 0 ? params.nodes[0] : null;\n      this.props.dispatch({ type: ACTIONS.SET_SELECTED_NODE, payload: nodeId });\n    });\n\n    network.on(\"selectEdge\", (params) => {\n      const edgeId = params.edges && params.edges.length === 1 ? params.edges[0] : null;\n      const isNodeSelected = params.nodes && params.nodes.length > 0;\n      if (!isNodeSelected && edgeId !== null) {\n        this.props.dispatch({ type: ACTIONS.SET_SELECTED_EDGE, payload: edgeId });\n      }\n    });\n\n    this.props.dispatch({ type: ACTIONS.SET_NETWORK, payload: network });\n  }\n\n  render(){\n    return (<div ref={'myRef'} className={'mynetwork'} />);\n  }\n}\n\nexport const NetworkGraphComponent = connect((state)=>{\n  return {\n    nodeHolder: state.graph.nodeHolder,\n    edgeHolder: state.graph.edgeHolder,\n    networkOptions: state.options.networkOptions\n  };\n})(NetworkGraph);","import { extractEdgesAndNodes } from './utils';\nimport { ACTIONS } from '../constants';\n\nexport const onFetchQuery = (result, query, oldNodeLabels, dispatch) => {\n  const { nodes, edges, nodeLabels } = extractEdgesAndNodes(result.data, oldNodeLabels);\n  dispatch({ type: ACTIONS.ADD_NODES, payload: nodes });\n  dispatch({ type: ACTIONS.ADD_EDGES, payload: edges });\n  dispatch({ type: ACTIONS.SET_NODE_LABELS, payload: nodeLabels });\n  dispatch({ type: ACTIONS.ADD_QUERY_HISTORY, payload: query });\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, TextField }  from '@material-ui/core';\nimport axios from 'axios';\nimport { ACTIONS, QUERY_ENDPOINT, COMMON_GREMLIN_ERROR } from '../../constants';\nimport { onFetchQuery } from '../../logics/actionHelper';\n\nclass Header extends React.Component {\n  clearGraph() {\n    this.props.dispatch({ type: ACTIONS.CLEAR_GRAPH });\n    this.props.dispatch({ type: ACTIONS.CLEAR_QUERY_HISTORY });\n  }\n\n  sendQuery() {\n    this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: null });\n    axios.post(\n      QUERY_ENDPOINT,\n      { host: this.props.host, port: this.props.port, query: this.props.query, nodeLimit: this.props.nodeLimit },\n      { headers: { 'Content-Type': 'application/json' } }\n    ).then((response) => {\n      onFetchQuery(response, this.props.query, this.props.nodeLabels, this.props.dispatch);\n    }).catch((error) => {\n      this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: COMMON_GREMLIN_ERROR });\n    });\n  }\n\n  onHostChanged(host) {\n    this.props.dispatch({ type: ACTIONS.SET_HOST, payload: host });\n  }\n\n  onPortChanged(port) {\n    this.props.dispatch({ type: ACTIONS.SET_PORT, payload: port });\n  }\n\n  onQueryChanged(query) {\n    this.props.dispatch({ type: ACTIONS.SET_QUERY, payload: query });\n  }\n\n  render(){\n    return (\n      <div className={'header'}>\n        <form noValidate autoComplete=\"off\">\n          <TextField value={this.props.host} onChange={(event => this.onHostChanged(event.target.value))} id=\"standard-basic\" label=\"host\" style={{width: '10%'}} />\n          <TextField value={this.props.port} onChange={(event => this.onPortChanged(event.target.value))} id=\"standard-basic\" label=\"port\" style={{width: '10%'}} />\n          <TextField value={this.props.query} onChange={(event => this.onQueryChanged(event.target.value))} id=\"standard-basic\" label=\"gremlin query\" style={{width: '60%'}} />\n          <Button variant=\"contained\" color=\"primary\" onClick={this.sendQuery.bind(this)} style={{width: '150px'}} >Execute</Button>\n          <Button variant=\"outlined\" color=\"secondary\" onClick={this.clearGraph.bind(this)} style={{width: '150px'}} >Clear Graph</Button>\n        </form>\n\n        <br />\n        <div style={{color: 'red'}}>{this.props.error}</div>\n      </div>\n\n    );\n  }\n}\n\nexport const HeaderComponent = connect((state)=>{\n  return {\n    host: state.gremlin.host,\n    port: state.gremlin.port,\n    query: state.gremlin.query,\n    error: state.gremlin.error,\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n    nodeLabels: state.options.nodeLabels,\n    nodeLimit: state.options.nodeLimit\n  };\n})(Header);","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  Typography,\n  ExpansionPanelDetails,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Fab,\n  IconButton,\n  Grid,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  FormControlLabel,\n  Switch,\n  Divider,\n  Tooltip\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport _ from 'lodash';\nimport { JsonToTable } from 'react-json-to-table';\nimport { ACTIONS, COMMON_GREMLIN_ERROR, QUERY_ENDPOINT } from '../../constants';\nimport axios from \"axios\";\nimport { onFetchQuery} from '../../logics/actionHelper';\nimport { stringifyObjectValues} from '../../logics/utils';\n\nclass Details extends React.Component {\n\n  onAddNodeLabel() {\n    this.props.dispatch({ type: ACTIONS.ADD_NODE_LABEL });\n  }\n\n  onEditNodeLabel(index, nodeLabel) {\n    this.props.dispatch({ type: ACTIONS.EDIT_NODE_LABEL, payload: { id: index, nodeLabel } });\n  }\n\n  onRemoveNodeLabel(index) {\n    this.props.dispatch({ type: ACTIONS.REMOVE_NODE_LABEL, payload: index });\n  }\n\n  onEditNodeLimit(limit) {\n    this.props.dispatch({ type: ACTIONS.SET_NODE_LIMIT, payload: limit });\n  }\n\n  onRefresh() {\n    this.props.dispatch({ type: ACTIONS.REFRESH_NODE_LABELS, payload: this.props.nodeLabels });\n  }\n\n  onTraverse(nodeId, direction) {\n    const query = `g.V('${nodeId}').${direction}()`;\n    axios.post(\n      QUERY_ENDPOINT,\n      { host: this.props.host, port: this.props.port, query: query, nodeLimit: this.props.nodeLimit },\n      { headers: { 'Content-Type': 'application/json' } }\n    ).then((response) => {\n      onFetchQuery(response, query, this.props.nodeLabels, this.props.dispatch);\n    }).catch((error) => {\n      this.props.dispatch({ type: ACTIONS.SET_ERROR, payload: COMMON_GREMLIN_ERROR });\n    });\n  }\n\n  onTogglePhysics(enabled){\n    this.props.dispatch({ type: ACTIONS.SET_IS_PHYSICS_ENABLED, payload: enabled });\n    if (this.props.network) {\n      const edges = {\n        smooth: {\n          type: enabled ? 'dynamic' : 'continuous'\n        }\n      };\n      this.props.network.setOptions( { physics: enabled, edges } );\n    }\n  }\n\n  generateList(list) {\n    let key = 0;\n    return list.map(value => {\n      key = key+1;\n      return React.cloneElement((\n        <ListItem>\n          <ListItemText\n            primary={value}\n          />\n        </ListItem>\n      ), {\n        key\n      })\n    });\n  }\n\n  generateNodeLabelList(nodeLabels) {\n    let index = -1;\n    return nodeLabels.map( nodeLabel => {\n      index = index+1;\n      nodeLabel.index = index;\n      return React.cloneElement((\n        <ListItem>\n          <TextField id=\"standard-basic\" label=\"Node Type\" InputLabelProps={{ shrink: true }} value={nodeLabel.type} onChange={event => {\n            const type = event.target.value;\n            const field = nodeLabel.field;\n            this.onEditNodeLabel(nodeLabel.index, { type, field })\n          }}\n          />\n          <TextField id=\"standard-basic\" label=\"Label Field\" InputLabelProps={{ shrink: true }} value={nodeLabel.field} onChange={event => {\n            const field = event.target.value;\n            const type = nodeLabel.type;\n            this.onEditNodeLabel(nodeLabel.index, { type, field })\n          }}/>\n          <IconButton aria-label=\"delete\" size=\"small\" onClick={() => this.onRemoveNodeLabel(nodeLabel.index)}>\n            <DeleteIcon fontSize=\"small\" />\n          </IconButton>\n        </ListItem>\n      ), {\n        key: index\n      })\n    });\n  }\n\n  render(){\n    let hasSelected = false;\n    let selectedType = null;\n    let selectedId = null ;\n    let selectedProperties = null;\n    let selectedHeader = null;\n    if (!_.isEmpty(this.props.selectedNode)) {\n      hasSelected = true;\n      selectedType =  _.get(this.props.selectedNode, 'type');\n      selectedId = _.get(this.props.selectedNode, 'id');\n      selectedProperties = _.get(this.props.selectedNode, 'properties');\n      stringifyObjectValues(selectedProperties);\n      selectedHeader = 'Node';\n    } else if (!_.isEmpty(this.props.selectedEdge)) {\n      hasSelected = true;\n      selectedType =  _.get(this.props.selectedEdge, 'type');\n      selectedId = _.get(this.props.selectedEdge, 'id');\n      selectedProperties = _.get(this.props.selectedEdge, 'properties');\n      selectedHeader = 'Edge';\n      stringifyObjectValues(selectedProperties);\n    }\n\n\n    return (\n      <div className={'details'}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={12} md={12}>\n            <ExpansionPanel>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n              >\n                <Typography>Query History</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <List dense={true}>\n                  {this.generateList(this.props.queryHistory)}\n                </List>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <ExpansionPanel>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n              >\n                <Typography>Settings</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <Tooltip title=\"Automatically stabilize the graph\" aria-label=\"add\">\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={this.props.isPhysicsEnabled}\n                          onChange={() => { this.onTogglePhysics(!this.props.isPhysicsEnabled); }}\n                          value=\"physics\"\n                          color=\"primary\"\n                        />\n                      }\n                      label=\"Enable Physics\"\n                    />\n                    </Tooltip>\n                    <Divider />\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <Tooltip title=\"Number of maximum nodes which should return from the query. Empty or 0 has no restrictions.\" aria-label=\"add\">\n                      <TextField label=\"Node Limit\" type=\"Number\" variant=\"outlined\" value={this.props.nodeLimit} onChange={event => {\n                        const limit = event.target.value;\n                        this.onEditNodeLimit(limit)\n                      }} />\n                    </Tooltip>\n\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <Divider />\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <Typography>Node Labels</Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <List dense={true}>\n                      {this.generateNodeLabelList(this.props.nodeLabels)}\n                    </List>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={12}>\n                    <Fab variant=\"extended\" color=\"primary\" size=\"small\" onClick={this.onRefresh.bind(this)}>\n                      <RefreshIcon />\n                      Refresh\n                    </Fab>\n                    <Fab variant=\"extended\" size=\"small\" onClick={this.onAddNodeLabel.bind(this)}>\n                      <AddIcon />\n                      Add Node Label\n                    </Fab>\n                  </Grid>\n                </Grid>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          </Grid>\n          {hasSelected &&\n          <Grid item xs={12} sm={12} md={12}>\n            <h2>Information: {selectedHeader}</h2>\n            {selectedHeader === 'Node' &&\n            <Grid item xs={12} sm={12} md={12}>\n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={6} md={6}>\n                  <Fab variant=\"extended\" size=\"small\" onClick={() => this.onTraverse(selectedId, 'out')}>\n                    Traverse Out Edges\n                    <ArrowForwardIcon/>\n                  </Fab>\n                </Grid>\n                <Grid item xs={6} sm={6} md={6}>\n                  <Fab variant=\"extended\" size=\"small\" onClick={() => this.onTraverse(selectedId, 'in')}>\n                    Traverse In Edges\n                    <ArrowBackIcon/>\n                  </Fab>\n                </Grid>\n              </Grid>\n            </Grid>\n            }\n            <Grid item xs={12} sm={12} md={12}>\n              <Grid container>\n                <Table aria-label=\"simple table\">\n                  <TableBody>\n                    <TableRow key={'type'}>\n                      <TableCell scope=\"row\">Type</TableCell>\n                      <TableCell align=\"left\">{String(selectedType)}</TableCell>\n                    </TableRow>\n                    <TableRow key={'id'}>\n                      <TableCell scope=\"row\">ID</TableCell>\n                      <TableCell align=\"left\">{String(selectedId)}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n                <JsonToTable json={selectedProperties}/>\n              </Grid>\n            </Grid>\n          </Grid>\n          }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport const DetailsComponent = connect((state)=>{\n  return {\n    host: state.gremlin.host,\n    port: state.gremlin.port,\n    network: state.graph.network,\n    selectedNode: state.graph.selectedNode,\n    selectedEdge: state.graph.selectedEdge,\n    queryHistory: state.options.queryHistory,\n    nodeLabels: state.options.nodeLabels,\n    nodeLimit: state.options.nodeLimit,\n    isPhysicsEnabled: state.options.isPhysicsEnabled\n  };\n})(Details);","import React from 'react';\nimport { Grid }  from '@material-ui/core';\nimport { NetworkGraphComponent } from './components/NetworkGraph/NetworkGraphComponent';\nimport { HeaderComponent } from './components/Header/HeaderComponent';\nimport { DetailsComponent } from './components/Details/DetailsComponent';\n\n\nexport class App extends React.Component{\n  render(){\n    return (\n      <div>\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={12} md={12}>\n            <HeaderComponent />\n          </Grid>\n          <Grid item xs={12} sm={9} md={9}>\n            <NetworkGraphComponent />\n          </Grid>\n          <Grid item xs={12} sm={3} md={3}>\n            <DetailsComponent />\n          </Grid>\n        </Grid>\n\n      </div>\n      );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { applyMiddleware, createStore, combineReducers, compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\n\nimport { reducer as gremlinReducer } from './reducers/gremlinReducer';\nimport { reducer as graphReducer } from './reducers/graphReducer';\nimport { reducer as optionReducer } from './reducers/optionReducer';\nimport { App } from './App';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = combineReducers({ gremlin: gremlinReducer, graph: graphReducer, options: optionReducer });\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(createLogger()))\n);\n\n//6. Render react element\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}